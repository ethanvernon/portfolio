{"version":3,"sources":["AboutMe.js","Portfolio.js","Resume.js","Contact.js","Blog.js","PauseMenu.js","serviceWorker.js","index.js"],"names":["AboutMe","_Component","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","inherits","createClass","key","value","react_default","a","createElement","className","Component","Portfolio","Resume","Contact","Blog","PauseMenu","_this","state","default","AboutMe_AboutMe","Portfolio_Portfolio","Resume_Resume","Contact_Contact","Blog_Blog","Boolean","window","location","hostname","match","ReactDOM","render","PauseMenu_PauseMenu","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9335404f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport class AboutMe extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\treturn (\r\n\t\t\t<div className='selector'>\r\n\t\t\t\t<span>About Me</span>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}","import React, { Component } from 'react';\r\n\r\nexport class Portfolio extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\treturn (\r\n\t\t\t<div className='selector'>\r\n\t\t\t\t<span>Portfolio</span>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}","import React, { Component } from 'react';\r\n\r\nexport class Resume extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\treturn (\r\n\t\t\t<div className='selector'>\r\n\t\t\t\t<span>Resume</span>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}","import React, { Component } from 'react';\r\n\r\nexport class Contact extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\treturn (\r\n\t\t\t<div className='selector'>\r\n\t\t\t\t<span>Contact</span>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}","import React, { Component } from 'react';\r\n\r\nexport class Blog extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\treturn (\r\n\t\t\t<div className='selector'>\r\n\t\t\t\t<span>Blog</span>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}","import React, { Component } from 'react';\r\nimport {AboutMe} from './AboutMe';\r\nimport {Portfolio} from './Portfolio';\r\nimport {Resume} from './Resume';\r\nimport {Contact} from './Contact';\r\nimport {Blog} from './Blog';\r\n\r\nexport class PauseMenu extends Component {\r\n\r\n\tconstructor(props) {\r\n\t    super(props);\r\n\r\n\t    this.state = {\r\n\t\t\tdefault: 1\r\n\t    };\r\n\r\n\t\t//this.myFunc = this.myFunc.bind(this);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<div className='pause-menu'>\r\n\t\t\t\t<AboutMe/>\r\n\t\t\t\t<Portfolio/>\r\n\t\t\t\t<Resume/>\r\n\t\t\t\t<Contact/>\r\n\t\t\t\t<Blog/>\t\t\t\t\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {PauseMenu} from './PauseMenu';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<PauseMenu />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}